{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["filter","require","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","auth","firestore","analytics","SignIn","className","onClick","provider","GoogleAuthProvider","signInWithPopup","SignOut","currentUser","signOut","BanButton","BOX","useState","ban","setBan","uid","photoURL","collection","where","get","then","querySnapshot","forEach","doc","catch","error","console","log","ChatRoom","dummy","useRef","messagesRef","bannedRef","query","orderBy","limit","useCollectionData","idField","messages","formValue","setFormValue","sendMessage","e","a","preventDefault","msg","bannedUser","setBannedUser","isProfane","window","location","reload","clean","add","text","createdAt","FieldValue","serverTimestamp","current","scrollIntoView","behavior","map","ChatMessage","key","id","message","ref","onSubmit","value","onChange","target","placeholder","type","disabled","props","messageClass","src","App","useAuthState","user","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6cfd985d.chunk.js","sourcesContent":["import React, { useRef, useState } from \"react\";\nimport \"./App.css\";\n\nimport firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\nimport \"firebase/analytics\";\n\nimport { useAuthState } from \"react-firebase-hooks/auth\";\nimport { useCollectionData } from \"react-firebase-hooks/firestore\";\n\nconst Filter = require(\"bad-words\");\nconst filter = new Filter();\n\nfirebase.initializeApp({\n  apiKey: \"AIzaSyB2tRp5HQtPpUOVk-jdCP2U4fp4lXyXVJI\",\n  authDomain: \"mini-project-ca10d.firebaseapp.com\",\n  projectId: \"mini-project-ca10d\",\n  storageBucket: \"mini-project-ca10d.appspot.com\",\n  messagingSenderId: \"605424166905\",\n  appId: \"1:605424166905:web:001bbcd9dcbb2478317f28\",\n});\n\nconst auth = firebase.auth();\nconst firestore = firebase.firestore();\nconst analytics = firebase.analytics();\n\nfunction App() {\n  const [user] = useAuthState(auth);\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>‚öõÔ∏èüî•üí¨</h1>\n        <SignOut />\n      </header>\n\n      <section>{user ? <BOX /> : <SignIn />}</section>\n    </div>\n  );\n}\n\nfunction SignIn() {\n  const signInWithGoogle = () => {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    auth.signInWithPopup(provider);\n  };\n\n  return (\n    <>\n      <button className=\"sign-in\" onClick={signInWithGoogle}>\n        Sign in with Google\n      </button>\n      <p>\n        Do not violate the community guidelines or you will be banned for life!\n      </p>\n    </>\n  );\n}\n\nfunction SignOut() {\n  return (\n    auth.currentUser && (\n      <button className=\"sign-out\" onClick={() => auth.signOut()}>\n        Sign Out\n      </button>\n    )\n  );\n}\n\nfunction BanButton() {\n  return (\n    <button className=\"sign-out\" onClick={() => auth.signOut()}>\n      BANNED\n    </button>\n  );\n}\n\nfunction BOX() {\n  const [ban, setBan] = useState(false);\n  const { uid, photoURL } = auth.currentUser;\n  let tmp = firestore\n    .collection(\"banned\")\n    .where(\"uid\", \"==\", uid)\n    .get()\n    .then(function (querySnapshot) {\n      querySnapshot.forEach(function (doc) {\n        // doc.data() is never undefined for query doc snapshots\n        // console.log(doc.id, \" => \", doc.data());\n        setBan(true);\n      });\n      return querySnapshot;\n    })\n    .catch(function (error) {\n      console.log(\"Error getting documents: \", error);\n      return false;\n    });\n  return <>{ban ? <BanButton /> : <ChatRoom />}</>;\n}\n\nfunction ChatRoom() {\n  const dummy = useRef();\n  const messagesRef = firestore.collection(\"messages\");\n  const bannedRef = firestore.collection(\"banned\");\n  const query = messagesRef.orderBy(\"createdAt\").limit(25);\n\n  const [messages] = useCollectionData(query, { idField: \"id\" });\n\n  const [formValue, setFormValue] = useState(\"\");\n\n  const sendMessage = async (e) => {\n    e.preventDefault();\n\n    const { uid, photoURL } = auth.currentUser;\n    let msg = formValue;\n    let bannedUser = false;\n    const setBannedUser = () => {\n      console.log(bannedUser);\n      bannedUser = true;\n      console.log(bannedUser);\n    };\n    let tmp = firestore\n      .collection(\"banned\")\n      .where(\"uid\", \"==\", uid)\n      .get()\n      .then(function (querySnapshot) {\n        querySnapshot.forEach(function (doc) {\n          // doc.data() is never undefined for query doc snapshots\n          // console.log(doc.id, \" => \", doc.data());\n          setBannedUser();\n        });\n        return querySnapshot;\n      })\n      .catch(function (error) {\n        console.log(\"Error getting documents: \", error);\n        return false;\n      });\n\n    // console.log(\"b\", bannedUser, tmp);\n\n    if (filter.isProfane(formValue)) {\n      window.location.reload();\n      // setFormValue(filter.clean(formValue));\n      msg = filter.clean(formValue);\n      bannedRef.add({\n        text: formValue,\n        createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n        uid,\n        photoURL,\n      });\n    }\n\n    await messagesRef.add({\n      text: msg,\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n      uid,\n      photoURL,\n    });\n\n    setFormValue(\"\");\n    dummy.current.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  return (\n    <>\n      <main>\n        {messages &&\n          messages.map((msg) => <ChatMessage key={msg.id} message={msg} />)}\n\n        <span ref={dummy}></span>\n      </main>\n\n      <form onSubmit={sendMessage}>\n        <input\n          value={formValue}\n          onChange={(e) => setFormValue(e.target.value)}\n          placeholder=\"say something nice\"\n        />\n\n        <button type=\"submit\" disabled={!formValue}>\n          üïäÔ∏è\n        </button>\n      </form>\n    </>\n  );\n}\n\nfunction ChatMessage(props) {\n  const { text, uid, photoURL } = props.message;\n\n  const messageClass = uid === auth.currentUser.uid ? \"sent\" : \"received\";\n\n  return (\n    <>\n      <div className={`message ${messageClass}`}>\n        <img\n          src={\n            photoURL || \"https://api.adorable.io/avatars/23/abott@adorable.png\"\n          }\n        />\n        <p>{text}</p>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}